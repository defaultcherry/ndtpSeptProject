from modules import dp, db, models, form_router
from modules.test_solution import test_solution
from modules.models import (
    main_keyboard,
    paginate_pages,
    tasks_keyboard,
    task_page_keyboard,
    SendSolutionForm
)

from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select


@dp.message(F.text == "–ó–∞–¥–∞—á–∏")
async def tasks_handler(message: types.Message):
    """User will get list of tasks. When it selects the task, it can see "Tests" and "Send solution" buttons.
    Furthermore, task title, description and notes would send to user"""
    with db.Session() as session:
        sel = select(models.Task).filter_by(visible=True)
        tasks = list(session.scalars(sel).all())
        if len(tasks) == 0:
            return await message.reply(
                "–ü—É—Å—Ç–æ...",
                reply_markup=main_keyboard(message.from_user.id)
            )
        pages = paginate_pages(tasks)
        base_text = "*–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á*:\n\n"
        for task in pages[0]:
            base_text += f"*{task.id}\\.* {task.title} \\- üë§{len(task.solved_by)}\n"
        base_text += (
            "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –Ω–∞–∂–∞–≤ –Ω–∞ –µ—ë –Ω–æ–º–µ—Ä –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É\\."
        )
        await message.reply(
            base_text, reply_markup=tasks_keyboard(pages), parse_mode="MarkdownV2"
        )


@dp.callback_query(F.data == "open_tasks_list")
async def tasks_callback_handler(query: types.CallbackQuery):
    with db.Session() as session:
        sel = select(models.Task).filter_by(visible=True)
        tasks = list(session.scalars(sel).all())
        pages = paginate_pages(tasks)
        base_text = "*–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á*:\n\n"
        for task in pages[0]:
            base_text += f"*{task.id}\\.* {task.title} \\- üë§{len(task.solved_by)}\n"
        base_text += (
            "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –Ω–∞–∂–∞–≤ –Ω–∞ –µ—ë –Ω–æ–º–µ—Ä –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É\\."
        )
        await query.message.edit_text(
            text=base_text, reply_markup=tasks_keyboard(pages), parse_mode="MarkdownV2"
        )


@dp.callback_query(F.data == "return_to_main")
async def return_to_main_handler(query: types.CallbackQuery):
    await query.answer()
    await query.message.delete()
    await query.message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", reply_markup=main_keyboard(query.from_user.id)
    )


@dp.callback_query(F.data.startswith("tasks_list_"))
async def tasks_list_callback_handler(query: types.CallbackQuery):
    await query.answer()
    data = query.data.removeprefix("tasks_list_")
    if data.isdigit():
        with db.Session() as session:
            sel = select(models.Task).filter_by(id=int(data))
            task = session.scalars(sel).first()
            if task is None or not task.visible:
                return
            await query.message.edit_text(
                f"*{task.title}*\n\n"
                f"{task.description}\n\n"
                + (f"_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:_ {task.notes}" if task.notes else ""),
                reply_markup=task_page_keyboard(task, task.author.telegram_id == query.from_user.id),
                parse_mode="MarkdownV2",
            )


@form_router.callback_query(F.data.startswith("cancel_send_task_solution_"))
async def cancel_send_task_solution(query: types.CallbackQuery, state: FSMContext):
    await query.answer()
    data = query.data.removeprefix("cancel_send_task_solution_")
    if not data.isdigit():
        return
    with db.Session() as session:
        sel = select(models.Task).filter_by(id=int(data))
        task = session.scalars(sel).first()
        if task is None or not task.visible:
            return
        await state.clear()
        await query.message.edit_text(
            f"*{task.title}*\n\n"
            f"{task.description}\n\n"
            + (f"_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:_ {task.notes}" if task.notes else ""),
            reply_markup=task_page_keyboard(task, task.author.telegram_id == query.from_user.id),
            parse_mode="MarkdownV2",
        )

@form_router.callback_query(F.data.startswith("task_send_solution_"))
async def send_task_solution_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()
    data = query.data.removeprefix("task_send_solution_")
    if not data.isdigit():
        return
    with db.Session() as session:
        sel = select(models.Task).filter_by(id=int(data))
        task = session.scalars(sel).first()
        if task is None or not task.visible:
            return
        await state.update_data(task_id=task.id)
        await state.set_state(SendSolutionForm.task_solution)
        await query.message.edit_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ (–±–æ—Ç —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8)",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞",
                            callback_data=f"cancel_send_task_solution_{task.id}",
                        )
                    ]
                ]
            ),
        )

@dp.callback_query(F.data.startswith("task_delete_"))
async def delete_task_handler(query: types.CallbackQuery):
    try:
        task_id = int(query.data.removeprefix("task_delete_"))
    except ValueError:
        return
    with db.Session() as session:
        task = session.scalars(
            select(models.Task).filter_by(id=task_id)
        ).first()
        if task is None or task.author.telegram_id != query.from_user.id:
            return
        await query.message.edit_text(
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É *{task.title}*?\n\n"
            "*–í–ù–ò–ú–ê–ù–ò–ï\\!\\!\\!* –í—Å—ë, —á—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ \\(—Ä–µ—à–µ–Ω–∏—è, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏ —Ç\\.–¥\\.\\) –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ\\.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–î–∞", callback_data=f"task_confirmed_delete_{task_id}"),
                        InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"tasks_list_{task_id}")
                    ]
                ]
            ),
            parse_mode="MarkdownV2"
        )

@dp.callback_query(F.data.startswith("task_confirmed_delete_"))
async def confirmed_task_delete_handler(query: types.CallbackQuery):
    try:
        task_id = int(query.data.removeprefix("task_confirmed_delete_"))
    except ValueError:
        return
    with db.Session() as session:
        task = session.scalars(
            select(models.Task).filter_by(id=task_id)
        ).first()
        if task is None or task.author.telegram_id != query.from_user.id:
            return
        for solution in task.solved_by:
            session.delete(solution)
        for contest_task in task.used_in_contests:
            session.delete(contest_task)
        session.delete(task)
        session.commit()
        await query.message.edit_text(
            "–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", callback_data="open_tasks_list")
                    ]
                ]
            )
        )

@form_router.message(SendSolutionForm.task_solution, F.text | F.document)
async def get_user_solution_handler(message: types.Message, state: FSMContext):
    solution = message.text
    if not solution:
        solution = (
            (await message.bot.download(message.document.file_id))
            .read()
            .decode("utf-8")
        )
    data = await state.update_data(task_solution=solution)
    await message.reply(
        "–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –û–∂–∏–¥–∞–π—Ç–µ –≤–µ—Ä–¥–∏–∫—Ç–∞",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞—á–µ",
                        callback_data=f"tasks_list_{data['task_id']}"
                    )
                ]
            ]
        )
    )
    await state.clear()
    result = await test_solution(
        task_id=data['task_id'],
        user_id=message.from_user.id,
        solution=data['task_solution']
    )
    if not result:
        return
    with db.Session() as session:
        solved_task = session.scalars(
            select(models.SolvedTask).filter_by(
                id=result
            )
        ).first()
        await message.answer(
            f"*–í–µ—Ä–¥–∏–∫—Ç –∫ –∑–∞–¥–∞—á–µ ‚Ññ{solved_task.task_id}:* {solved_task.verdict.name}\n\n"
            f"*–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç \\(–º–∞–∫—Å\\.\\):* {str(round(solved_task.solve_time or 0, 3)).replace(".", "\\.")} —Å–µ–∫\\.\n"
            # f"*–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç \\(–º–∞–∫—Å\\.\\):* {str(round(solved_task.megabyte_usage or 0, 3)).replace(".", "\\.")} –ú–ë\n"
            f"*–û—à–∏–±–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–µ:* {solved_task.failed_test or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"*–û—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞:* {solved_task.code_format_errors or '–Ω–µ—Ç'}",
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞—á–µ",
                            callback_data=f"tasks_list_{data['task_id']}"
                        )
                    ]
                ]
            )
        )
