from aiogram.utils.keyboard import InlineKeyboardBuilder

from .users import Task
from modules import db
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

__all__ = [
    "main_keyboard",
    "settings_main_keyboard",
    "notification_settings_inline_keyboard",
    "profile_keyboard",
    "tasks_keyboard",
    "admin_panel_main_keyboard",
    "task_page_keyboard",
    "created_tasks_keyboard",
]


def main_keyboard(user_id: int):
    keyboard = [
        [KeyboardButton(text="–ó–∞–¥–∞—á–∏"), KeyboardButton(text="–î–æ—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤")],
        [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ]
    user = db.get_user(telegram_id=user_id)
    if user.is_owner or user.can_create_tasks or user.can_create_contests or user.can_manage_permissions:
        keyboard.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    keyboard.append([KeyboardButton(text="–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")])
    return ReplyKeyboardMarkup(
        keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True
    )


def settings_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton(text="–û –±–æ—Ç–µ")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def notification_settings_inline_keyboard(
    new_contest_enabled: bool, new_task_enabled: bool, contest_results_enabled: bool
):
    status = {True: "‚úÖ", False: "‚ùå"}
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{status[new_contest_enabled]} –ù–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ",
                    callback_data="notifications_switch_new_contest",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{status[new_task_enabled]} –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                    callback_data="notifications_switch_new_task",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{status[contest_results_enabled]} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è",
                    callback_data="notifications_switch_contest_results",
                )
            ],
            [
                InlineKeyboardButton(
                    text="–í–∫–ª—é—á–∏—Ç—å –≤—Å—ë", callback_data="notifications_switch_all_on"
                ),
                InlineKeyboardButton(
                    text="–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë", callback_data="notifications_switch_all_off"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="notifications_switch_return_to_settings",
                )
            ],
        ],
        resize_keyboard=True,
    )


def profile_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ú–æ–∏ –∑–∞–¥–∞—á–∏"),
                KeyboardButton(text="–ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"),
            ],
            [
                KeyboardButton(text="–†–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"),
                KeyboardButton(text="–†–µ—à—ë–Ω–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"),
            ],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é")],
        ],
        resize_keyboard=True,
    )


def tasks_keyboard(tasks: list[list[Task]]):
    control_panel = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="<<", callback_data="tasks_list_start"),
                InlineKeyboardButton(text="<", callback_data="tasks_list_prev"),
                InlineKeyboardButton(
                    text=f"1/{len(tasks)}", callback_data="tasks_list_page_1"
                ),
                InlineKeyboardButton(text=">", callback_data="tasks_list_next"),
                InlineKeyboardButton(text=">>", callback_data="tasks_list_end"),
            ],
            [
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="return_to_main"
                )
            ],
        ]
    )
    builder = InlineKeyboardBuilder()
    for page in tasks:
        for task in page:
            builder.button(text=str(task.id), callback_data=f"tasks_list_{task.id}")
    builder.adjust(5)
    builder.attach(InlineKeyboardBuilder.from_markup(control_panel))
    return builder.as_markup()


def task_page_keyboard(task: Task, is_task_owner: bool = False):
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                callback_data=f"task_send_solution_{task.id}",
            )
        ],
        [
            InlineKeyboardButton(
                text="–¢–µ—Å—Ç—ã",
                callback_data=f"task_show_tests_{task.id}"
            ),
            InlineKeyboardButton(
                text="–ú–æ–∏ –ø–æ–ø—ã—Ç–∫–∏",
                callback_data=f"task_show_attempts_{task.id}"
            )
        ],
        [],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data=f"open_tasks_list"
            )
        ],
    ]
    if is_task_owner:
        inline_keyboard[2].append(
            InlineKeyboardButton(
                text="–í—Å–µ —Ä–µ—à–µ–Ω–∏—è",
                callback_data=f"task_show_solutions_{task.id}"
            )
        )
        inline_keyboard[2].append(
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
                callback_data=f"task_delete_{task.id}"
            )
        )
    else:
        inline_keyboard[2].append(
            InlineKeyboardButton(
                text="–ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞",
                url=f"tg://user?id={task.author.telegram_id}"
            )
        )
    return InlineKeyboardMarkup(
        inline_keyboard=inline_keyboard
    )


def created_tasks_keyboard(tasks: list[list[Task]]):
    control_panel = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="<<", callback_data="tasks_authored_start"),
                InlineKeyboardButton(text="<", callback_data="tasks_authored_prev"),
                InlineKeyboardButton(
                    text=f"1/{len(tasks)}", callback_data="tasks_authored_page_1"
                ),
                InlineKeyboardButton(text=">", callback_data="tasks_authored_next"),
                InlineKeyboardButton(text=">>", callback_data="tasks_authored_end"),
            ],
            [
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="return_to_main"
                )
            ],
        ]
    )
    builder = InlineKeyboardBuilder()
    for page in tasks:
        for task in page:
            builder.button(text=str(task.id), callback_data=f"tasks_authored_{task.id}")
    builder.adjust(5)
    builder.attach(InlineKeyboardBuilder.from_markup(control_panel))
    return builder.as_markup()


def admin_panel_main_keyboard(
    create_task: bool, create_contest: bool, manage_permissions: bool, owner: bool
):
    keyboard = [[], [], [KeyboardButton(text="–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é")]]
    if create_task or owner:
        keyboard[0].append(KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"))
    if create_contest or owner:
        keyboard[0].append(KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"))
    if manage_permissions or owner:
        keyboard[1].append(KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    if owner:
        keyboard[1].append(KeyboardButton(text="–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞"))
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
